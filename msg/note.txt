===========================Requiring Logins===========================
from django.views import generic
from django.contrib.auth.mixins import LoginRequiredMixin

from . import models


class List(generic.ListView):
    model = models.Product


class Detail(generic.DetailView):
    model = models.Product
    

class Create(LoginRequiredMixin, generic.CreateView):
    fields = ("name", "description", "discount", "price")
    model = models.Product
	
	

===========================LoginView===========================
Django's section on logging users in 
<https://docs.djangoproject.com/en/1.9/topics/auth/default/#how-to-log-a-user-in> 
is definitely worth a read, 
especially for some of the more behind-the-scenes parts of 
using login() and authenticate(). Also read about the authentication views.
<https://docs.djangoproject.com/en/1.9/topics/auth/default/#module-django.contrib.auth.views>

----------------urls.py-------------------
from django.conf.urls import url, include
from . import views

urlpatterns = [
    url(r"^accounts/", include("accounts.urls", namespace="accounts")),
    url(r'accounts/', include('django.contrib.auth.urls')),
]

----------------registration/login.html-------------------
{% block body_content %}
<div class="container">
	<h1>Log into your account</h1>
  <form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Log in">
    </form>
</div>
{% endblock %}



=========================LogoutView and SignUpView=========================
The logout function is your best bet for logging a user out.

Signing users up can be a very specific thing for your site, 
so be sure to make that process fit your site. <django-registration>
<https://django-registration.readthedocs.io/en/2.1.2/>is a very popular package for 
customizing the registration workflow and one I definitely recommend checking out.

If you'd like to do authentication and registration through third-party sites, 
let letting a user sign up with their Twitter account, check out 
<django-allauth>/<https://readthedocs.org/projects/django-allauth/>
or <python-social-auth>/<http://psa.matiasaguirre.net/docs/index.html>.

----------------signup and login immediately.py-------------------
from django.core.urlresolvers import reverse_lazy
from django.contrib.auth import authenticate, login
from django.views import generic

from . import forms


class SignUp(generic.CreateView):
    form_class = forms.UserCreateForm
    template_name = 'accounts/signup.html'
    success_url = reverse_lazy("products:list")
    
    def form_valid(self, form):
        response = super().form_valid(form)
        user = authenticate(
					username=form.cleaned_data['username'], 
					password=form.cleaned_data['password1']
				)
        if user is not None:
            if user.is_active:
                login(self.request, user)
            return response



=========================Custom User Manager=========================
Django's models use model managers to interact with the ORM. 
When you're going to create a custom user, you need to create a custom model 
manager for it, too.

You can see a <full example> 
<https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#a-full-example> 
in the Django docs. Check these docs if you want to know 
<more about managers> <https://docs.djangoproject.com/en/1.9/topics/db/managers/>

----------------User/Admin user creation model-------------------
from django.contrib.auth.models import BaseUserManager
		
class UserManager(BaseUserManager):
    
    def create_user(self, email, dob, accepted_tos=False, password=None):
        #Check and see if user accepts terms and aggreements...
        if accepted_tos != True:
            raise ValueError("You have to accept terms and aggreement before proceeding.")
        #Create user model to be stored in memory...
        user = self.model(
            email = self.normalize_email(email),
            dob = dob,
            accepted_tos = True,
        )
        user.set_password(password)
        user.save()
        return user
    
    def create_superuser(self, email, dob, password):
        user = self.create_user(
            email,
            dob,
            accepted_tos=True,
            password=password
        )
        user.is_staff = True
        user.is_superuser = True
        user.save()
        return user



=========================Custom User Model=========================
Now that the custom user model is in place, it's time to create the custom user!
You can see a <full example>
<https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#a-full-example>
in the Django docs.

Controlling your users through the Django admin <requires a bit more work> 
<https://docs.djangoproject.com/en/1.9/topics/auth/customizing/#custom-users-and-django-contrib-admin>.

----------------user models.py-------------------
from django.contrib.auth.models import (
    PermissionsMixin,
    BaseUserManager,
    AbstractBaseUser
)
from django.db import models
from django.utils import timezone


class UserManager(BaseUserManager):
    def create_user(self, email, dob, accepted_tos=None, password=None):
        if not accepted_tos:
            raise ValueError("Users must accept the terms of service")

        user = self.model(
            email=self.normalize_email(email),
            dob=dob,
            accepted_tos=True
        )
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, dob, password):
        user = self.create_user(
            email,
            dob,
            accepted_tos=True,
            password=password
        )
        user.is_staff = True
        user.is_superuser = True
        user.save()
        return user
    

class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    dob = models.DateField()
    accepted_tos = models.BooleanField()
    is_staff = models.BooleanField(default=False)
    joined_at = models.DateTimeField(default=timezone.now)
    
    objects = UserManager()
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["dob"]



=========================Permissions=========================
Permissions control what users are allowed to do.
Permissions get into one of the hairier parts of Django, the 
<contentypes> framework. Have a look through the <
contenttypes docs> <https://docs.djangoproject.com/en/1.10/ref/contrib/contenttypes/>
if you want to know more. In short, though, it's a model that holds a reference 
to every non-abstract model in your project.



=========================Checkpoints=========================
Now that you know what permissions are, let's add a custom one and 
require them for actions on the site.

The PermissionRequiredMixin is from 
<Django> 
<https://docs.djangoproject.com/en/1.9/topics/auth/default/#the-permissionrequiredmixin-mixin>
itself, and it only checks for a certain permission. 
If you need to check for multiple permissions, 
<django-braces> offers a <MultiplePermissionsRequiredMixin> 
<https://django-braces.readthedocs.io/en/latest/access.html#multiplepermissionsrequiredmixin>.


----------------Product models.py-------------------
from django.core.urlresolvers import reverse
from django.db import models


class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField()
    discount = models.DecimalField(blank=True, null=True)
    
    def __str__(self):
        return self.name
      
    def get_absolute_url(self):
        return reverse("products:detail", kwargs={"pk": self.pk})
    
    class Meta:
        #creating a permission for user to give discount...
        permissions = (
            ("can_give_discount", "give_discount"),
        )


----------------Product views.py-------------------
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views import generic

from . import models


class List(generic.ListView):
    model = models.Product


class Detail(generic.DetailView):
    model = models.Product
    

class Create(LoginRequiredMixin, generic.CreateView):
    fields = ("name", "description", "discount", "price")
    model = models.Product
    
	'''
	Here we check if the user has the right permission to give discount
	otherwise we just det the discount to zero
	'''
	def form_valid(self, form):
		'''
		We now use has_perm("permissions") to see if user has permission
		To give discount.
		'''
        resp = super().form_valid(form)
        self.object = form.save(commit=False)
        if not self.request.user.has_perm("products.can_give_discount"):
            self.object.discount = 0
            self.object.save()
        return resp




=========================Bringing It All Together=========================
With custom permissions in place, now it's time to add the final pieces to the templates.

Checking {{ perms }} in templates is a great way to show and hide bits and pieces based on 
what a user is allowed to do. You shouldn't show them buttons they can't actually click!

You can also check <has_perm> or <has_perms> on a user model, too, 
to see if they have the appropriate permission for a bit of logic.

For row-level or object-level permissions, <django-guardian>
<https://django-guardian.readthedocs.io/en/stable/>
is a great project to check out.


----------------Editors create Group views.py-------------------
from django.contrib.auth.models import (
    PermissionsMixin,
    BaseUserManager,
    AbstractBaseUser,
    Permission,
    Group
)
from django.db import models
from django.utils import timezone


class UserManager(BaseUserManager):
    def create_user(self, email, dob, accepted_tos=None, password=None):
        if not accepted_tos:
            raise ValueError("Users must accept the terms of service")

        user = self.model(
            email=self.normalize_email(email),
            dob=dob,
            accepted_tos=True
        )
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, dob, password):
        user = self.create_user(
            email,
            dob,
            accepted_tos=True,
            password=password
        )
        user.is_staff = True
        user.is_superuser = True
        user.save()
        return user
      
    def create_editor(self, email, dob, password):
        user = self.create_user(
            email,
            dob,
            accepted_tos=True,
            password=password
        )
        try:
            editors = Group.objects.get(name__iexact="Editors")
            user.groups.add(editors)
            user.save()
        except Group.DoesNotExist:
            editors = Group.objects.create(name="Editors")
            editors.permissions.add(Permission.objects.get(codename="can_give_discount"))
            user.groups.add(editors)
            user.save()
        return user

    
class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    dob = models.DateField()
    accepted_tos = models.BooleanField()
    is_staff = models.BooleanField(default=False)
    joined_at = models.DateTimeField(default=timezone.now)
    
    objects = UserManager()
    
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["dob"]




